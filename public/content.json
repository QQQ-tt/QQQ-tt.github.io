{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/01/09/hello-world/"},{"title":"","text":"1.docker安装1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 2.镜像源配置（可选项）更改配置后重启docker 2.1 docker hub镜像源12# 查看文件内容cat /etc/docker/daemon.json 1234567891011# 添加以下内容（可选项）sudo tee /etc/docker/daemon.json &lt;&lt;-'EOF'{ &quot;registry-mirrors&quot;: [ &quot;https://dockerproxy.com&quot;, &quot;https://hub-mirror.c.163.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://ccr.ccs.tencentyun.com&quot; ]}EOF 镜像来源 地址 网易云 https://hub-mirror.c.163.com 百度云 https://mirror.baidubce.com 阿里云 https://0lah620j.mirror.aliyuncs.com 2.2 私有仓库源向daemon.json文件添加以下内容 123{ &quot;insecure-registries&quot;: [&quot;ip:port&quot;]} 3.开放2375 port1vim /usr/lib/systemd/system/docker.service 12# ExecStart 最后添加-H tcp://0.0.0.0:2375 123# 重启systemctl daemon-reloadsystemctl restart docker 12# 查看端口情况netstat -ano | grep 2375 4.部分docker命令4.1 删除全部none镜像1docker rmi $(docker images | grep &quot;none&quot; | awk '{print $3}') 4.2 如果镜像在运行123456# 停止容器docker stop $(docker ps -a | grep &quot;Exited&quot; | awk '{print $1 }') # 删除容器docker rm $(docker ps -a | grep &quot;Exited&quot; | awk '{print $1 }')# 删除镜像docker rmi $(docker images | grep &quot;none&quot; | awk '{print $3}') 4.3 根据容器名称删除容器及镜像12345678#!/bin/bashcontainer_id=`docker ps -aq --filter &quot;ancestor=$1&quot;`echo $container_iddocker stop $container_iddocker rm $container_idimage_id=`docker image ls -q -f &quot;reference=$1&quot;`echo $image_iddocker rmi $image_id 4.4 导入导出4.4.1 save docker save [options] images [images…] 示例 12docker save -o xxx.tar xxx:latestdocker save &gt; xxx.tar xxx:latest 4.4.2 load docker load [options] 示例 12docker load -i xxx.tardocker load &lt; xxx.tar 4.4.3 export docker export [options] container 示例 1docker export -o xxx.tar xxx 4.4.4 import docker import [options] file|URL|- [REPOSITORY[:TAG]] 12docker import xxx:tar xxx:tagcat xxx.tar | docker import - xxx:tag 4.4.5 区别 export命令导出的tar文件略小于save命令导出的 export命令是从容器（container）中导出tar文件，而save命令则是从镜像（images）中导出 基于第二点，export导出的文件再import回去时，无法保留镜像所有历史（即每一层layer信息） 4.5 查看容器信息1docker inspect [OPTIONS] NAME|ID [NAME|ID...] 1docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 容器 其中{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}是go语言的模板{{ }}是开始和结束，range是开始遍历，end是结束遍历 4.5 进入容器1docker exec [OPTIONS] CONTAINER COMMAND [ARG...] 1docker exec -it 容器 /bin/bash 4.6 容器运行挂载目录1234# 最后结尾没有 '/' 可以是目录也可以是文件/home/qtx/mysql/my.cnf:/etc/my.cnf# 最后结尾有 '/' 代表是目录/home/qtx/mysql/:/var/lib/mysql/","link":"/2024/01/19/docker/"}],"tags":[],"categories":[],"pages":[]}